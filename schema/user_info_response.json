{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UserInfoResponse",
  "type": "object",
  "required": [
    "lockdrop_total_locked_lp_token",
    "lockdrop_total_reward",
    "lockup_infos",
    "lp_token_addr",
    "user_total_locked_lp_token",
    "user_total_reward"
  ],
  "properties": {
    "lockdrop_total_locked_lp_token": {
      "description": "Total CTX tokens user received as rewards for participation in the lockdrop",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lockdrop_total_reward": {
      "description": "Total lockdrop rewards to be distributed among the users",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "lockup_infos": {
      "description": "Lockup positions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LockUpInfoResponse"
      }
    },
    "lp_token_addr": {
      "description": "Terraswap LP token",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "user_total_locked_lp_token": {
      "description": "Total user's locked terraswap lp tokens",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "user_total_reward": {
      "description": "Total user's lockdrop rewards to be distributed",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "LockUpInfoResponse": {
      "type": "object",
      "required": [
        "claimable",
        "claimed",
        "duration",
        "locked_lp_token",
        "total_reward",
        "unlock_second",
        "weighted_score"
      ],
      "properties": {
        "claimable": {
          "description": "CTX tokens that can be vested",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "claimed": {
          "description": "CTX tokens received as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "locked_lp_token": {
          "description": "Terraswap LP token locked by the user",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_reward": {
          "description": "CTX tokens estimated|allocated as rewards for participation in the lockdrop",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlock_second": {
          "description": "Timestamp in second beyond which this position can be unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "weighted_score": {
          "description": "total_weighted_score of the position",
          "allOf": [
            {
              "$ref": "#/definitions/Uint256"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
